// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Group {
    id         String   @id @default(uuid())
    name       String
    User       User[] // The group can have users which are accounts that can view the data
    Person     Person[] // The group can have people which are the people that are counted
    inviteCode String   @default(uuid())
    unit       String   @default("punten")
}

// A user account that can be used to log in and view the data and may be linked to a person
// that is counted.
model User {
    id                String             @id @default(uuid())
    email             String             @unique
    password          String
    user_type         String             @default("user")
    group             Group?             @relation(fields: [groupId], references: [id])
    groupId           String?
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    sessions          Session[]
    person            Person?
    emailConfirmed    Boolean            @default(false)
    EmailConfirmation EmailConfirmation?
}

model EmailConfirmation {
    id        String   @id @default(uuid())
    code      String
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    email     String
    expiresAt DateTime
    createdAt DateTime @default(now())
}

// An entity that represents a person that is counted. This may be linked to a user account
// or may be a generic person that is not linked to a user account. This allows people that
// don't have an account to be counted.
model Person {
    id      String  @id @default(uuid())
    user    User?   @relation(fields: [userId], references: [id])
    userId  String? @unique
    name    String
    group   Group   @relation(fields: [groupId], references: [id])
    groupId String

    Count Count[]
}

model Count {
    id        String   @id @default(uuid())
    person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
    personId  String
    count     Int
    countDate DateTime
}

model Session {
    id        String   @id
    userId    String
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
